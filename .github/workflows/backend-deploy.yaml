name: Backend deploy process
on:
  push:
    branches: [GPF-66-deployment-init]
jobs:
  build-push-gcr:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: backend
      PROJECT_ID: venture-capitol
      REPO_ID: images
      GAR_HOSTNAME: europe-west1-docker.pkg.dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Build Docker Image
        run: |-
          docker build \
          -t $GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:latest \
          -t $GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:${GITHUB_SHA::6} \
          -f ./apps/backend/Dockerfile .

      - name: Configure Docker Client
        run: gcloud auth configure-docker $GAR_HOSTNAME --quiet
      #         gcloud auth configure-docker --quiet

      - name: Push Docker Image to Artifact Registry
        run: |-
          docker push $GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:latest
          docker push $GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:${GITHUB_SHA::6}

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    needs: [build-push-gcr]
    # if docker build läuft übrhaupt, warte, sonst nicht

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Setup Google cloud credentials and set GOOGLE_APPLICATION_CREDENTIALS environment variable
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.0.1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./deploy
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: ./deploy
        run: terraform fmt -check

      # Terraform validate
      - name: Terraform Validate
        working-directory: ./deploy
        run: terraform validate

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        working-directory: ./deploy
        run: terraform plan -no-color

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          STDOUT: "```${{ steps.plan.outputs.stdout }}```"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.STDOUT
            })

      # On push to master, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        working-directory: ./deploy
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
