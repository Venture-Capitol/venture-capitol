name: Backend CI/CD
on:
  push:
    branches: [main]
  pull_request:
    branches: [main, develop]

env:
  IMAGE_NAME: backend
  PROJECT_ID: venture-capitol
  REPO_ID: images
  GAR_HOSTNAME: europe-west1-docker.pkg.dev

jobs:
  build-push-gcr:
    name: "Docker: Build and Push Container"
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout Repository Files
        uses: actions/checkout@v2

      # Setup Google cloud credentials and set GOOGLE_APPLICATION_CREDENTIALS environment variable
      - name: Setup Google Cloud Credentials
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEPLOY_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      # Make the Google Artifact Registry available to Docker
      - name: Setup to use Google Artifact Registry
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: gcloud auth configure-docker $GAR_HOSTNAME --quiet

      # Get previous dockerfile for using it as a cache
      - name: Pull previous container file for using it as a cache
        continue-on-error: true
        run: docker pull $GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:latest

      # Build the Docker image
      - name: Build the Docker Image
        run: |-
          docker build \
          --cache-from=$GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:latest \
          -t $GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:latest \
          -t $GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:${GITHUB_SHA::6} \
          -f ./apps/backend/Dockerfile .

      - name: Push the Docker Image to Google Artifact Registry
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |-
          docker push $GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:latest
          docker push $GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:${GITHUB_SHA::6}

  terraform:
    name: "Terraform: Validate, Plan and Apply"
    runs-on: ubuntu-latest
    needs: [build-push-gcr]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout Repository Files
        uses: actions/checkout@v2

      # Set the image name as an environment variable
      - name: Set the value
        id: step_one
        run: |
          echo "TF_VAR_image_name=$GAR_HOSTNAME/$PROJECT_ID/$REPO_ID/$IMAGE_NAME:${GITHUB_SHA::6}" >> $GITHUB_ENV

      # Setup Google cloud credentials and set GOOGLE_APPLICATION_CREDENTIALS environment variable
      - name: Setup Google Cloud Credentials
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEPLOY_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: fmt
        working-directory: ./deploy
        run: terraform fmt -check

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        working-directory: ./deploy
        run: terraform init

      # Terraform validate
      - name: Terraform Validate
        id: validate
        working-directory: ./deploy
        run: terraform validate -no-color

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        working-directory: ./deploy
        run: terraform plan -no-color

      # Show terraform plan as comment in PR
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # On push to master, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        working-directory: ./deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
